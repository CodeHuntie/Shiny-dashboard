selectInput(
iunputId = "input1",
label= "Choose the year you like to look at ",
c("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidPage(
box(
plotOutput(outputId = "box1"),
plotOutput(outputId = "hist1"),
)))
)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\time series")
kings <- scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kings
str(kings)
kingstimeseries <- ts(kings) # write to time series format
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
birthstimeseries <- ts(births, frequency=12, start=c(1946,1))
birthstimeseries
plot.ts(kingstimeseries)
shinyApp(ui, server)
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
c("2007", "2008", "2009", "2010"))),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = c("2007", "2008", "2009", "2010"))),
shinyApp(ui, server)
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1"),
plotOutput(outputId = "hist1"),
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
shinyApp(ui, server)
library(dplyr);
library(lubridate)
library(shiny);
library(shinydashboard);
library(ggplot2);
library(dplyr);
library(lubridate)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1"),
plotOutput(outputId = "hist1"),
)))
)
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# breaks coorespond to input
output$hist1<- renderPlot(hist(data$ActiveEnergy_avg, breaks = input$slider1))
}
shinyApp(ui, server)
shinyApp(ui, server)
################ Time series #################
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(energy79, weekDay == Monday & hour == 20 & minute == 1)
################ Time series #################
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(energy79, wday == Monday & hour == 20 & minute == 1)
################ Time series #################
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(energy79, wday == Monday & hour == 20 & minute == 1)
################ Time series #################
## Subset to one observation per week on Mondays at 8:00pm for 2007, 2008 and 2009
house070809weekly <- filter(energy79, wday == "Monday" & hour == 20 & minute == 1)
View(house070809weekly)
## Create TS object with SubMeter3 -Temp
tsSM3_070809weekly <- ts(house070809weekly$Temp, frequency=52, start=c(2007,1))
autoplot(tsSM3_070809weekly)
install.packages("ggfortify")
library(ggfortify)
## Plot sub-meter 3 with autoplot (you may need to install these packages)
autoplot(tsSM3_070809weekly)
## Plot sub-meter 3 with autoplot (you may need to install these packages)
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Temperature Con.")
## Plot sub-meter 3 with autoplot (you may need to install these packages)
autoplot(tsSM3_070809weekly, ts.colour = 'red', xlab = "Time", ylab = "Watt Hours", main = "Temperature Con. Ts analysis")
## Plot sub-meter 3 with plot.ts
plot.ts(tsSM3_070809weekly)
library(ggplot2); library(ggpubr); library(plotly);library(ggfortify); library(forecast)
## Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
install.packages("fracdiff")
## Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
library(forecast)
## Apply time series linear regression to the sub-meter 3 ts object and use summary to obtain R2 and RMSE from the model you built
fitSM3 <- tslm(tsSM3_070809weekly ~ trend + season)
summary(fitSM3)
## Create the forecast for sub-meter 3. Forecast ahead 20 time periods
forecastfitSM3 <- forecast(fitSM3, h=20)
## Plot the forecast for sub-meter 3.
plot(forecastfitSM3)
## Create sub-meter 3 forecast with confidence levels 80 and 90
forecastfitSM3c <- forecast(fitSM3, h=20, level=c(80,90))
## Plot sub-meter 3 forecast, limit y and add labels
plot(forecastfitSM3c, ylim = c(0, 20), ylab= "Watt-Hours", xlab="Time")
summary(forecastfitSM3c) # examine R2, p-value
shinyApp(ui, server)
library(shiny);
library(shinydashboard);
library(ggplot2);
library(dplyr);
library(lubridate)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1"),
plotOutput(outputId = "hist1"),
)))
)
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# breaks coorespond to input
output$hist1<- renderPlot(hist(data$ActiveEnergy_avg, breaks = input$slider1))
}
shinyApp(ui, server)
library(shiny);
library(shinydashboard);
library(ggplot2);
library(dplyr);
library(lubridate)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1"),
plotOutput(outputId = "hist1"),
)))
)
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# breaks coorespond to input
output$hist1<- renderPlot(hist(data$ActiveEnergy_avg, breaks = input$slider1))
}
shinyApp(ui, server)
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1"),
box(
plotOutput(outputId = "hist1"),
)))
))
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1"),
box(
plotOutput(outputId = "hist1"),
)))
))
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1"),
box(
plotOutput(outputId = "hist1"),
)))
)
dashboardBody(
fluidRow(
box(
plotOutput(outputId = "box1")),
box(
plotOutput(outputId = "hist1")),
)
shinyApp(ui, server)
shinyApp(ui, server)
dashboardBody(
box(
plotOutput(outputId = "box1")),
box(
plotOutput(outputId = "hist1")),
)
shinyApp(ui, server)
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
)
shinyApp(ui, server)
library(shiny);
library(shinydashboard);
library(ggplot2);
library(dplyr);
library(lubridate)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
)
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# breaks coorespond to input
output$hist1<- renderPlot(hist(data$ActiveEnergy_avg, breaks = input$slider1))
}
shinyApp(ui, server)
dashboardBody(
fluidRow(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
))
shinyApp(ui, server)
library(shiny);
library(shinydashboard);
library(ggplot2);
library(dplyr);
library(lubridate)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidRow(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
)))
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# breaks coorespond to input
output$hist1<- renderPlot(hist(data$ActiveEnergy_avg, breaks = input$slider1))
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny);
library(shinydashboard);
library(ggplot2);
library(dplyr);
library(lubridate)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidRow(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
)))
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data
%>% filter(year(date) == input$input1)) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# breaks coorespond to input
output$hist1<- renderPlot(hist(data$ActiveEnergy_avg, breaks = input$slider1))
}
shinyApp(ui, server)
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
fluidRow(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
)))
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
)))
shinyApp(ui, server)
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
))
shinyApp(ui, server)
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
))
output$box1 <- renderPlot(
ggplot(data = data %>% filter(year(date) == input$input1)) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
))
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
shinyApp(ui, server)
shinyApp(ui, server)
output$box1 <- renderPlot(
ggplot(data = data %>% filter(year(date) == input$input1)) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
output$box1 <- renderPlot(
ggplot(data = data %>% filter(year(date) == input$input1)) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
shinyApp(ui, server)
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny);
library(shinydashboard);
library(ggplot2);
library(dplyr);
library(lubridate)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
# Dashboard
ui <- dashboardPage(
dashboardHeader(title = "Dashboard"), # dont show ??
dashboardSidebar(
sliderInput(
inputId = "slider1",
label = "Choose the number of breaks in the histogram:",
min = 10,
max = 50,
value = 25),
selectInput(                    # dont show ?
iunputId = "input1",
label= "Choose the year you like to look at ",
choices = list("2007", "2008", "2009", "2010"))),
dashboardBody(
box(plotOutput(outputId = "box1")),
box(plotOutput(outputId = "hist1"))
))
server <- function(input, output) {
output$box1 <- renderPlot(
ggplot(data = data) +
geom_line(aes(x = date, y = ActiveEnergy_avg)))
# breaks coorespond to input
output$hist1<- renderPlot(
hist(data$ActiveEnergy_avg, breaks = input$slider1))
}
shinyApp(ui, server)
setwd("C:\\Users\\kenne\\OneDrive\\Desktop\\Bx Ubiqum\\workshops\\Shiny")
data <- readRDS("data_ready.rds")
